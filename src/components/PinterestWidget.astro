---
interface Props {
    userId?: string;
    boardId?: string;
    pinCount?: number;
    showBoardInfo?: boolean;
    columns?: number;
}

const { 
    userId = '', 
    boardId = '', 
    pinCount = 20, 
    showBoardInfo = true,
    columns = 3 
} = Astro.props;

// Note: In production, store API credentials in environment variables
const PINTEREST_ACCESS_TOKEN = import.meta.env.PINTEREST_ACCESS_TOKEN;

let boardData = null;
let pinsData = [];
let error = null;

try {
    if (boardId) {
        // Fetch specific board information
        const boardResponse = await fetch(
            `https://api.pinterest.com/v5/boards/${boardId}`,
            {
                headers: {
                    'Authorization': `Bearer ${PINTEREST_ACCESS_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (boardResponse.ok) {
            boardData = await boardResponse.json();
        }

        // Fetch pins from the board
        const pinsResponse = await fetch(
            `https://api.pinterest.com/v5/boards/${boardId}/pins?page_size=${pinCount}&pin_fields=id,link,title,description,alt_text,board_id,board_section_id,created_at,note,color,dominant_color,media`,
            {
                headers: {
                    'Authorization': `Bearer ${PINTEREST_ACCESS_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (pinsResponse.ok) {
            const pinsResult = await pinsResponse.json();
            pinsData = pinsResult.items || [];
        }
    }
} catch (e) {
    error = e.message;
    console.error('Pinterest API Error:', e);
}
---

<div class="pinterest-widget">
    {error && (
        <div class="error">
            <p>Error loading Pinterest content: {error}</p>
        </div>
    )}

    {boardData && showBoardInfo && (
        <div class="board-header">
            <h3 class="board-title">{boardData.name}</h3>
            {boardData.description && (
                <p class="board-description">{boardData.description}</p>
            )}
            <div class="board-stats">
                <span class="pin-count">{boardData.pin_count} pins</span>
                <span class="follower-count">{boardData.follower_count} followers</span>
            </div>
        </div>
    )}

    {pinsData.length > 0 && (
        <div class="pins-grid" data-columns={columns}>
            {pinsData.map((pin) => (
                <div class="pin-card">
                    <a 
                        href={pin.link || `https://pinterest.com/pin/${pin.id}`} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="pin-link"
                    >
                        {pin.media?.images?.['564x'] && (
                            <img 
                                src={pin.media.images['564x'].url} 
                                alt={pin.alt_text || pin.title || 'Pinterest pin'}
                                class="pin-image"
                                loading="lazy"
                            />
                        )}
                        <div class="pin-overlay">
                            {pin.title && <h4 class="pin-title">{pin.title}</h4>}
                            {pin.note && <p class="pin-description">{pin.note}</p>}
                        </div>
                    </a>
                </div>
            ))}
        </div>
    )}

    {pinsData.length === 0 && !error && (
        <div class="no-content">
            <p>No pins found or board is private.</p>
        </div>
    )}
</div>

<style>
    .pinterest-widget {
        max-width: 100%;
        margin: 2rem 0;
    }

    .error {
        background-color: #fee;
        border: 1px solid #fcc;
        border-radius: 4px;
        padding: 1rem;
        color: #c00;
    }

    .board-header {
        margin-bottom: 2rem;
        text-align: center;
        padding: 1.5rem;
        background: linear-gradient(135deg, #e60023, #bd081c);
        color: white;
        border-radius: 12px;
    }

    .board-title {
        margin: 0 0 0.5rem 0;
        font-size: 1.8rem;
        font-weight: bold;
    }

    .board-description {
        margin: 0 0 1rem 0;
        opacity: 0.9;
        line-height: 1.4;
    }

    .board-stats {
        display: flex;
        justify-content: center;
        gap: 2rem;
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .pins-grid {
        display: grid;
        gap: 1rem;
        grid-template-columns: repeat(var(--columns, 3), 1fr);
    }

    .pins-grid[data-columns="2"] {
        --columns: 2;
    }

    .pins-grid[data-columns="3"] {
        --columns: 3;
    }

    .pins-grid[data-columns="4"] {
        --columns: 4;
    }

    .pin-card {
        position: relative;
        border-radius: 12px;
        overflow: hidden;
        background: #f8f8f8;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        break-inside: avoid;
    }

    .pin-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .pin-link {
        display: block;
        text-decoration: none;
        color: inherit;
        position: relative;
    }

    .pin-image {
        width: 100%;
        height: auto;
        display: block;
        border-radius: 12px;
    }

    .pin-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
        color: white;
        padding: 1rem;
        transform: translateY(100%);
        transition: transform 0.3s ease;
    }

    .pin-card:hover .pin-overlay {
        transform: translateY(0);
    }

    .pin-title {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        font-weight: 600;
        line-height: 1.3;
    }

    .pin-description {
        margin: 0;
        font-size: 0.85rem;
        line-height: 1.4;
        opacity: 0.9;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .no-content {
        text-align: center;
        padding: 2rem;
        color: #666;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .pins-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .board-stats {
            flex-direction: column;
            gap: 0.5rem;
        }

        .board-title {
            font-size: 1.4rem;
        }
    }

    @media (max-width: 480px) {
        .pins-grid {
            grid-template-columns: 1fr;
        }

        .pinterest-widget {
            margin: 1rem 0;
        }

        .board-header {
            padding: 1rem;
        }
    }

    /* Masonry-style layout alternative */
    .pins-grid.masonry {
        columns: var(--columns, 3);
        column-gap: 1rem;
    }

    .pins-grid.masonry .pin-card {
        margin-bottom: 1rem;
        break-inside: avoid;
    }
</style>

<script>
    // Add Pinterest branding attribution
    const widget = document.querySelector('.pinterest-widget');
    if (widget && !widget.querySelector('.pinterest-attribution')) {
        const attribution = document.createElement('div');
        attribution.className = 'pinterest-attribution';
        attribution.innerHTML = `
            <p style="text-align: center; margin-top: 1rem; font-size: 0.8rem; color: #666;">
                Powered by <a href="https://pinterest.com" target="_blank" style="color: #e60023;">Pinterest</a>
            </p>
        `;
        widget.appendChild(attribution);
    }

    // Lazy loading for better performance
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src || img.src;
                    img.classList.remove('lazy');
                    imageObserver.unobserve(img);
                }
            });
        });

        document.querySelectorAll('.pin-image[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }
</script>