---
import PinterestPin from './PinterestPin.astro';

const { boardId = '', pinCount = 20, columns = 3 } = Astro.props;

const PINTEREST_ACCESS_TOKEN = import.meta.env.PINTEREST_ACCESS_TOKEN;

let pinsData = [];

if (boardId) {
    const pinsResponse = await fetch(
        `https://api.pinterest.com/v5/boards/${boardId}/pins?page_size=${pinCount}&pin_fields=id,link,title,description,alt_text,media,note`,
        {
            headers: {
                'Authorization': `Bearer ${PINTEREST_ACCESS_TOKEN}`,
                'Content-Type': 'application/json'
            }
        }
    );
    if (pinsResponse.ok) {
        const pinsResult = await pinsResponse.json();
        pinsData = pinsResult.items || [];
    }
}
---

<style>
.pins-grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(var(--columns, 3), 1fr);
}

.pins-grid[data-columns="2"] { --columns: 2; }
.pins-grid[data-columns="3"] { --columns: 3; }
.pins-grid[data-columns="4"] { --columns: 4; }

/* Responsive example */
@media (max-width: 768px) {
    .pins-grid { grid-template-columns: 1fr 1fr; }
}
@media (max-width: 480px) {
    .pins-grid { grid-template-columns: 1fr; }
}
</style>

{pinsData.length > 0 && (
    <div class="pins-grid" data-columns={columns}>
        {pinsData.map((pin) =>
            pin ? <PinterestPin pin={pin} /> : null
        )}
    </div>
)}

